#!/bin/sh

source ~/.config/sabs.conf
cd ~/.local/abs-pkg

abs_root() {
	$SABS_SUDO $@
}

log() {
	echo -e "\e[1;34m::\e[0m" $@
}

usage() {
	echo "Usage:" $@
	exit 255
}

gen_patch() {
	patch < $1

	log "Opening shell..."
	echo "The patch is automatically generated when you close this shell."
	echo "Use this shell to modify the package files"

	export PS1="(sabs) $PS1"
	bash

	diff -r ../orig-src . > "$1"
	log "Generating patch..."
}

init_build() {
	log "Initializing build"

	cp -R orig-src src
	cd src
}

download_sources() {
	log "Downloading sources"

	patch < ../predownload.patch
	makepkg -so -p $(cat ../pkgbuild.path)
}

do_build() {
	log "Started actual build"

	patch < ../prebuild.patch
	makepkg -si -p $(cat ../pkgbuild.path)
}

cleanup_build() {
	log "Started cleanup after build"

	cd ..
	rm -rf src
}

update() {
	cd ~/.local/abs-pkg/$1

	./update
}

full_build() {
	init_build
	download_sources
	do_build
	cleanup_build
}

case $1 in
	"update")
		if [[ -z $2 ]]
		then
			log "Updating all packages"

			for dir in $(ls -1 ~/.local/abs-pkg/)
			do

				if update $dir
				then
					cd ~/.local/abs-pkg/$dir
					full_build
				fi

			done
		else
			log "Updating $2"

			if update $2
			then
				cd ~/.local/abs-pkg/$2
				full_build
			fi

		fi
		;;

	"build")
		log "Building $2..."
		[[ ! -d ~/.local/abs-pkg/$2 ]] && usage "sabs build <package>"

		cd ~/.local/abs-pkg/$2

		full_build
		;;

	"ebd")
		log "Generating pre-download patch"
		[[ ! -d ~/.local/abs-pkg/$2 ]] && usage "sabs ebd <package>"

		cd ~/.local/abs-pkg/$2


		init_build # do not build or install dependencies
		gen_patch ../predownload.patch
		log "Downloading sources"
		makepkg -so -p $(cat ../pkgbuild.path)
		do_build
		cleanup_build
		;;

	"ebb")
		log "Generating pre-build patch"
		[[ ! -d ~/.local/abs-pkg/$2 ]] && usage "sabs ebb <package>"
		cd ~/.local/abs-pkg/$2

		init_build
		download_sources # do not build, just install sources and dependencies
		gen_patch ../prebuild.patch

		log "Started actual build"
		makepkg -si -p $(cat ../pkgbuild.path)

		cleanup_build
		;;
	*)
		usage "sabs (build|ebd|ebb)"
		;;
esac
