#!/bin/sh

source ~/.config/sabs.conf
cd ~/.abs-pkg

abs_root() {
	$SABS_SUDO $@
}

log() {
	echo -e "\e[1;34m::\e[0m" $@
}

usage() {
	echo "Usage: sabs <build|ebd|ebb>"
}

dopatch() {
	touch $1
	patch < $1
}

gen_patch() {
	backup=$(mktemp -d ~/.cache/abs-pkg/abs.XXXXXX)

	patch < $1
	cp -R * $backup

	log "Opening shell..."

	export PS1="(sabs) $PS1"
	bash

	diff -r $backup . > "$1"
	log "Generating patch..."

	rm -rf $backup
}

init_build() {
	log "Initializing build"

	cp -R sabs/orig-src src
	cd src
}

download_sources() {
	log "Downloading sources"

	patch < ../sabs/predownload.patch
	makepkg -o
}

do_build() {
	log "Started actual build"

	patch < ../sabs/prebuild.patch
	makepkg -si
}

cleanup_build() {
	log "Started cleanup after build"

	cd ..
	rm -rf src
}

case $1 in
	"install")
		dir=$(basename $2 .git)
		log "Downloading from $2 to $dir"
		mkdir $dir &> /dev/null
		cd ~/.abs-pkg/$dir

		mkdir sabs &> /dev/null

		git clone $2 sabs/orig-src
		touch sabs/predownload.patch
		touch sabs/prebuild.patch
		echo $2 > sabs/git-src
		;;
	"build")
		log "Building $2..."
		cd ~/.abs-pkg/$2

		if [[ -z $1 ]]
		then
			echo "Usage: sabs build <package>"; fi

		init_build
		download_sources
		do_build
		cleanup_build
		;;
	"ebd")
		log "Generating pre-download patch"
		cd ~/.abs-pkg/$2

		init_build # do not build or install dependencies
		gen_patch ../sabs/predownload.patch
		log "Downloading sources"
		makepkg -o
		do_build
		cleanup_build
		;;
	"ebb")
		log "Generating pre-build patch"
		cd ~/.abs-pkg/$2

		init_build
		download_sources # do not build, just install sources and dependencies
		gen_patch ../sabs/prebuild.patch

		log "Started actual build"
		makepkg -si

		cleanup_build
		;;
	*)
		usage
		;;
esac
